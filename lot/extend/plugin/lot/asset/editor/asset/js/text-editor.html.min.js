TE.HTML = function(target, o) {

    var _u2018 = '\u2018', // left single quotation mark
        _u2019 = '\u2019', // right single quotation mark
        _u201C = '\u201C', // left double quotation mark
        _u201D = '\u201D', // right double quotation mark
        _u2013 = '\u2013', // N-dash
        _u2014 = '\u2014', // M-dash
        _u2026 = '\u2026', // horizontal ellipsis
        _u00A6 = '\u00A6', // broken bar
        _u00A9 = '\u00A9', // copyright sign
        _u2117 = '\u2117', // sound recording copyright sign
        _u2120 = '\u2120', // service mark
        _u2122 = '\u2122', // trade mark sign
        _u00AE = '\u00AE', // registered sign
        _u00B1 = '\u00B1', // plus-minus sign
        _u00D7 = '\u00D7', // multiplication sign
        _u00F7 = '\u00F7', // division sign
        _u00B0 = '\u00B0', // degree sign
        _u2039 = '\u2039', // left pointing single angle quotation mark
        _u203A = '\u203A', // right pointing single angle quotation mark
        _u00AB = '\u00AB', // left pointing double angle quotation mark
        _u00BB = '\u00BB', // right pointing double angle quotation mark
        _u2264 = '\u2264', // less than or equal to
        _u2265 = '\u2265', // greater than or equal to
        _u2260 = '\u2260', // not equal to
        _u2190 = '\u2190', // leftwards arrow
        _u2192 = '\u2192', // rightwards arrow
        _u2191 = '\u2191', // upwards arrow
        _u2193 = '\u2193', // downwards arrow
        _u21B5 = '\u21B5', // carriage return arrow
        _u2318 = '\u2318', // command sign
        _u00B7 = '\u00B7', // middle dot
        _u2116 = '\u2116', // `No` sign

		win = window,
		doc = document,
	    editor = new TE(target),
        ui = editor.create(extend({
			suffix: '>',
			tools: 'clear | bold italic underline strike | link image | subscript superscript | paragraph | header | quote code | bullet list | align-left align-center align-right align-justify | table horizontal | undo redo',
			languages: {
				tools: {
					clear: 'Clear Formats (Delete)',
					bold: 'Bold (' + _u2318 + '+B)',
					italic: 'Italic (' + _u2318 + '+I)',
					underline: 'Underline (' + _u2318 + '+U)',
					strike: 'Strike (' + _u2318 + '+Delete)',
					link: 'Link (' + _u2318 + '+L)',
					image: 'Image (' + _u2318 + '+G)',
					subscript: 'Subscript (' + _u2318 + '+' + _u2193 + ')',
					superscript: 'Subscript (' + _u2318 + '+' + _u2191 + ')',
					paragraph: 'Paragraph (' + _u2318 + '+' + _u21B5 + ')',
					header: 'H1 ' + _u2013 + ' H6 (' + _u2318 + '+H)',
					quote: 'Quote (' + _u2318 + '+Q)',
					code: 'Code (' + _u2318 + '+K)',
					bullet: 'Unordered List (' + _u2318 + '+-)',
					list: 'Ordered List (' + _u2318 + '++)',
					horizontal: 'Horizontal Rule (' + _u2318 + '+R)'
				},
				modals: {
					link: {
						title: ['URL', 'Title'],
						placeholder: ['http://', ""],
						text: 'link text'
					},
					image: {
						title: ['Source URL', 'Caption'],
						placeholder: ['http://', ""]
					}
				},
				buttons: {
					ok: 'OK',
					cancel: 'Cancel',
					yes: 'Yes',
					no: 'No',
					enter: 'Enter',
					exit: 'Exit',
					open: 'Open',
					close: 'Close',
					ignore: 'Ignore'
				}
			},
			classes: {
				formats: {
					top: 'align-top',
					right: 'align-right',
					bottom: 'align-bottom',
					left: 'align-left',
					center: 'align-center',
					middle: 'align-middle',
					justify: 'align-justify'
				}
			},
			formats: {
				b: 'strong',
				i: 'em',
				u: 'u',
				s: 'del datetime="%1-%2-%3"',
				a: 'a',
				figure: 'figure',
				figcaption: 'figcaption',
				img: 'img',
				sub: 'sub',
				sup: 'sup',
                p: 'p',
				br: 'br',
				h1: 'h1',
				h2: 'h2',
				h3: 'h3',
				h4: 'h4',
				h5: 'h5',
				h6: 'h6',
				blockquote: 'blockquote',
				q: 'q',
				pre: 'pre',
				code: 'code',
				ul: 'ul',
				ol: 'ol',
				li: 'li',
				table: 'table border="1"',
				hr: 'hr'
				
			}
		}, o)),
		config = editor.config,
		languages = config.languages,
		formats = config.formats,
		tab = config.tab,
		suffix = config.suffix,
		attrs = '(?:\\s[^<>]*?)?',
		attrs_capture = '(|\\s[^<>]*?)';

    function is_node(x) {
        return x instanceof HTMLElement;
    }

    function is_function(x) {
        return typeof x === "function";
    }

    function is_object(x) {
        return typeof x === "object";
    }

    function extend(a, b) {
        b = b || {};
        for (var i in b) {
            if (is_object(a[i]) && !is_node(a[i])) {
                a[i] = extend(a[i], b[i]);
            } else {
                a[i] = b[i];
            }
        }
        return a;
    }

	function pattern(a, b) {
		return new RegExp(a, b);
	}

	function get_o(s) {
		return s.split(/\s+/)[0];
	}

	editor.tree = function(parent, child) {
		var s = editor.$(),
		    ul = formats[parent] || parent,
			li = formats[child] || child,
			ul_o = get_o(ul),
			li_o = get_o(li);
		if (!s.length) {
			var match = s.before.match(pattern('(?:^|\\n)(\\s*)<' + li_o + attrs + '>.*$'));
			if (match) {
				var dent = match[1] || "";
				editor.wrap('\n' + dent + tab + '<' + ul + '>\n' + dent + tab + tab + '<' + li + '>', '</' + li_o + '>\n' + dent + tab + '</' + ul_o + '>\n' + dent);
			} else {
				editor.wrap('<' + ul + '>\n' + tab + '<' + li + '>', '</' + li_o + '>\n</' + ul_o + '>');
			}
		} else {
			editor[0]()
			    .gap('\n\n', "")
				.replace(/\n/g, '</' + li_o + '>\n' + tab + '<' + li + '>')
				.wrap('<' + ul + '>\n' + tab + '<' + li + '>', '</' + li_o + '>\n</' + ul_o + '>\n\n', true)
				.replace(pattern('\\n' + tab + '<' + li + '>\\s*<\\/' + li_o + '>\\n', 'g'), '\n</' + ul_o + '>\n\n<' + ul + '>\n')
				.select(editor.$().end)
			[1]();
		}
		return editor;
	};

    extend(ui.tools, {
        bold: function(e, $) {
            $.format(formats.b);
        },
        italic:  function(e, $) {
            $.format(formats.i);
        },
        underline: function(e, $) {
            $.format(formats.u);
        },
        strike: {
            i: 'strikethrough',
            click: function(e, $) {
                $.format($._.format(formats.s, $._.time()));
            }
        },
        link: {
            click: function(e, $) {
                var a = formats.a,
				    i18n = languages.modals.link,
				    href, title;
                $.record().ui.prompt(i18n.title[0], i18n.placeholder[0], true, function(v) {
                    href = v;
                    // automatic `rel="nofollow"` attribute
                    var host = win.location.host,
					    x, extra;
                    if (href.indexOf('://') !== -1) x = true;
                    if (host !== "" && href.indexOf('://' + host) !== -1) x = false;
					if (/^([.\/?&#]|javascript:)/.test(href)) x = false;
                    $.blur().ui.prompt(i18n.title[1], i18n.placeholder[1], false, function(v) {
                        title = v.replace(/"/g, '&quot;').replace(/'/g, '&apos;');
                        if (!$.$().length) {
                            $.insert(i18n.text);
                        }
						extra = x ? ' rel="nofollow" target="_blank"' : "";
                        $.gap(' ').wrap('<' + a + ' href="' + href + '"' + (title ? ' title="' + title + '"' : "") + extra + '>', '</' + get_o(a) + '>');
                    });
                });
            }
        },
        image: {
            click: function(e, $) {
                var img = formats.img,
				    figure = formats.figure,
					figcaption = formats.figcaption,
					alt = $.$().value.replace(/<.*?>/g, ""),
					i18n = languages.modals.image,
				    src, title;
                $.record().ui.prompt(i18n.title[0], i18n.placeholder[0], true, function(v) {
                    src = v;
                    $.blur().ui.prompt(i18n.title[1], i18n.placeholder[1], false, function(v) {
                        title = v;
						if (!alt.length) {
							alt = src.split(/[\/\\\\]/).pop();
						}
						$[0]().insert("");
						if (!title) {
							$.gap(' ', "").insertBefore('<' + img + ' alt="' + alt + '" src="' + src + '"' + suffix + ' ');
						} else {
							$.gap('\n\n', "").insertBefore('<' + figure + '>\n' + tab + '<' + img + ' alt="' + alt + '" src="' + src + '"' + suffix + '\n' + tab + '<' + figcaption + '>' + title + '</' + get_o(figcaption) + '>\n</' + get_o(figure) + '>\n\n');
						}
						$[1]();
                    });
                });
            }
        },
        clear: {
            i: 'eraser',
            click: function(e, $) {
				var v = $.$().value;
                $[0]().replace(/<[^<>]+?>/g, "").unwrap(/<[^<>\/]+?>/, /<\/[^<>]+?>/);
				if ($.$().value === v) {
					$.insert("");
				}
				$[1]();
            }
        },
        subscript: function(e, $) {
			var sub = formats.sub,
			    sup = formats.sup,
				sup_o = get_o(sup);
            $[0]().unwrap(pattern('<' + sup_o + attrs + '>'), '</' + sup_o + '>').format(sub)[1]();
        },
        superscript: function(e, $) {
			var sub = formats.sub,
			    sup = formats.sup,
				sub_o = get_o(sub);
            $[0]().unwrap(pattern('<' + sub_o + attrs + '>'), '</' + sub_o + '>').format(sup)[1]();
        },
        paragraph: function(e, $) {
			var s = $.$(),
				p = formats.p,
				br = formats.br,
				p_o = get_o(p),
				br_o = get_o(br);
			if (!s.length || s.value.indexOf('\n') === -1) {
				$.format(p, false, '\n');
			} else {
				var para = pattern('^(?:\\s*<' + p_o + attrs + '>\\s*)+([\\s\\S]*?)(?:\\s*<\\/' + p_o + '>\\s*)+$');
				if (para.test(s.value)) {
					$[0]()
						.replace(para, '$1')
						.replace(pattern('\\s*<\\/' + p_o + '>\\s*<' + p_o + attrs + '>\\s*', 'g'), '\n\n')
						.replace(pattern('\\s*<' + br_o + attrs + '>\\s*', 'g'), '\n')
					[1]();
				} else {
					$[0]()
						.replace(/\n/g, '\n<' + br + suffix + '\n')
						.replace(pattern('(\\s*<' + br_o + attrs + suffix + '\\s*){2,}', 'g'), '</' + p_o + '>\n<' + p + '>')
						.wrap('<' + p + '>', '</' + p_o + '>', true)
						.replace(pattern('(<' + p_o + attrs + '>)+', 'g'), '$1')
						.replace(pattern('(<\\/' + p_o + '>)+', 'g'), '$1')
						.gap('\n')
					[1]();
				}
			}
        },
		header: function(e, $) {
			var attr = "",
				level = 0,
				s = $.$(),
				H = [
					formats.p,
					formats.h1,
					formats.h2,
					formats.h3,
					formats.h4,
					formats.h5,
					formats.h6
				],
				H_o = [];
			$._.each(H, function(v, i) {
				H_o[i] = get_o(v);
			});
			var tags = $.esc(H).join('|'),
				tags_o = $.esc(H_o).join('|'),
				o = '\\s*<(' + tags + ')' + attrs_capture + '>\\s*',
				w_o = pattern('\\s*<(?:' + tags + ')' + attrs + '>\\s*'),
				w_c = pattern('\\s*<\\/(?:' + tags_o + ')>\\s*'),
				match = s.value.match(pattern('^' + o));
			if (!match) {
				match = s.before.match(pattern(o + '$')) || [];
			}
			attr = match[2] || "";
			level = +((match[1] || 'h0').slice(1));
			$[0]()
				.replace(/\s+/g, ' ')
				.unwrap(w_o, w_c)
				.unwrap(w_o, w_c, true)
				.format(level > 5 ? H_o[0] + attr : H_o[level + 1] + attr, false, '\n\n')
			[1]();
		},
		quote: {
			i: 'quote-left',
			click: function(e, $) {
				var s = $.$(),
				    blockquote = formats.blockquote,
					q = formats.q;
				// block
				if (/(^|\n)$/.test(s.before)) {
					$.format(blockquote, false, '\n\n', '\n');
				// span
				} else {
					$.format(q);
				}
			}
		},
		code: function(e, $) {
			var s = $.$(),
				pre = formats.pre,
				code = formats.code,
				pre_o = get_o(pre),
				code_o = get_o(code),
				B = '<' + pre_o + attrs + '>\\s*<' + code_o + attrs + '>\\s*',
				A = '\\s*<\\/' + code_o + '>\\s*<\\/' + pre_o + '>',
				before = pattern(B + '\\s*$'),
				after = pattern('^\\s*' + A),
				all = /^[\s\S]*?$/;
			// block
			if (pattern('(^|\\n|' + B + ')$').test(s.before)) {
				if (before.test(s.before) && after.test(s.after)) {
					$[0]().unwrap(pattern(before), pattern(after)).replace(all, function(a) {
						return a.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&');
					})[1]();
				} else {
					$[0]().gap('\n\n').wrap('<' + pre + '><' + code + '>', '</' + code_o + '></' + pre_o + '>').replace(all, function(a) {
						return a.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
					})[1]();
				}
			// span
			} else {
				$.format(code);
			}
		},
		bullet: {
			i: 'list-ul',
			click: function(e, $) {
				var s = $.$(),
				    ol = formats.ol,
					ul = formats.ul,
					ol_o = get_o(ol),
					ul_o = get_o(ul);
				if ($.match(pattern('<' + (ul_o + '|' + ol_o) + attrs + '>([\\s\\S]*?)<\\/' + (ul_o + '|' + ol_o) + '>'))) {
					$[0]()
						.replace(pattern('<' + ol_o + attrs_capture + '>', 'g'), '<' + ul_o + '$1>')
						.replace(pattern('</' + ol_o + '>', 'g'), '</' + ul_o + '>')
					[1]();
				} else {
					$.tree(formats.ul, formats.li);
				}
			}
		},
		list: {
			i: 'list-ol',
			click: function(e, $) {
				    ol = formats.ol,
					ul = formats.ul,
					ol_o = get_o(ol),
					ul_o = get_o(ul);
				if ($.match(pattern('<' + (ul_o + '|' + ol_o) + attrs + '>([\\s\\S]*?)<\\/' + (ul_o + '|' + ol_o) + '>'))) {
					$[0]()
						.replace(pattern('<' + ul_o + attrs_capture + '>', 'g'), '<' + ol_o + '$1>')
						.replace(pattern('</' + ul_o + '>', 'g'), '</' + ol_o + '>')
					[1]();
				} else {
					$.tree(formats.ol, formats.li);
				}
			}
		},
		horizontal: {
			i: 'ellipsis-h',
			click: function(e, $) {
				$.gap('\n\n', "").insertBefore('<' + formats.hr + suffix + '\n\n');
			}
		}
    });

	editor._.each(ui.tools, function(v, i) {
		var title = languages.tools[i] || "";
		if (is_function(v)) {
			ui.tools[i] = {
				title: title,
				click: v
			}
		} else {
			if (!v.title) v.title = title;
		}
	});

    extend(ui.keys, {
        'control+b': 'bold'
    });

    return editor.create();

};